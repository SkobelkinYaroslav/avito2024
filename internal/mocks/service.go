// Code generated by MockGen. DO NOT EDIT.
// Source: service/service.go
//
// Generated by this command:
//
//	mockgen -source=service/service.go -destination=mocks/service.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	domain "avito2024/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNoAuthRepo is a mock of NoAuthRepo interface.
type MockNoAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockNoAuthRepoMockRecorder
}

// MockNoAuthRepoMockRecorder is the mock recorder for MockNoAuthRepo.
type MockNoAuthRepoMockRecorder struct {
	mock *MockNoAuthRepo
}

// NewMockNoAuthRepo creates a new mock instance.
func NewMockNoAuthRepo(ctrl *gomock.Controller) *MockNoAuthRepo {
	mock := &MockNoAuthRepo{ctrl: ctrl}
	mock.recorder = &MockNoAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoAuthRepo) EXPECT() *MockNoAuthRepoMockRecorder {
	return m.recorder
}

// DummyLoginRepo mocks base method.
func (m *MockNoAuthRepo) DummyLoginRepo(status string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DummyLoginRepo", status)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DummyLoginRepo indicates an expected call of DummyLoginRepo.
func (mr *MockNoAuthRepoMockRecorder) DummyLoginRepo(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DummyLoginRepo", reflect.TypeOf((*MockNoAuthRepo)(nil).DummyLoginRepo), status)
}

// LoginRepo mocks base method.
func (m *MockNoAuthRepo) LoginRepo(user domain.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginRepo", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginRepo indicates an expected call of LoginRepo.
func (mr *MockNoAuthRepoMockRecorder) LoginRepo(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginRepo", reflect.TypeOf((*MockNoAuthRepo)(nil).LoginRepo), user)
}

// RegisterRepo mocks base method.
func (m *MockNoAuthRepo) RegisterRepo(user domain.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRepo", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterRepo indicates an expected call of RegisterRepo.
func (mr *MockNoAuthRepoMockRecorder) RegisterRepo(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRepo", reflect.TypeOf((*MockNoAuthRepo)(nil).RegisterRepo), user)
}

// MockAuthOnlyRepo is a mock of AuthOnlyRepo interface.
type MockAuthOnlyRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthOnlyRepoMockRecorder
}

// MockAuthOnlyRepoMockRecorder is the mock recorder for MockAuthOnlyRepo.
type MockAuthOnlyRepoMockRecorder struct {
	mock *MockAuthOnlyRepo
}

// NewMockAuthOnlyRepo creates a new mock instance.
func NewMockAuthOnlyRepo(ctrl *gomock.Controller) *MockAuthOnlyRepo {
	mock := &MockAuthOnlyRepo{ctrl: ctrl}
	mock.recorder = &MockAuthOnlyRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthOnlyRepo) EXPECT() *MockAuthOnlyRepoMockRecorder {
	return m.recorder
}

// CheckUserRepo mocks base method.
func (m *MockAuthOnlyRepo) CheckUserRepo(tokenString string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserRepo", tokenString)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserRepo indicates an expected call of CheckUserRepo.
func (mr *MockAuthOnlyRepoMockRecorder) CheckUserRepo(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserRepo", reflect.TypeOf((*MockAuthOnlyRepo)(nil).CheckUserRepo), tokenString)
}

// CreateFlatRepo mocks base method.
func (m *MockAuthOnlyRepo) CreateFlatRepo(flat domain.Flat) (domain.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlatRepo", flat)
	ret0, _ := ret[0].(domain.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlatRepo indicates an expected call of CreateFlatRepo.
func (mr *MockAuthOnlyRepoMockRecorder) CreateFlatRepo(flat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlatRepo", reflect.TypeOf((*MockAuthOnlyRepo)(nil).CreateFlatRepo), flat)
}

// GetHouseFlatsRepo mocks base method.
func (m *MockAuthOnlyRepo) GetHouseFlatsRepo(id int) ([]domain.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHouseFlatsRepo", id)
	ret0, _ := ret[0].([]domain.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHouseFlatsRepo indicates an expected call of GetHouseFlatsRepo.
func (mr *MockAuthOnlyRepoMockRecorder) GetHouseFlatsRepo(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHouseFlatsRepo", reflect.TypeOf((*MockAuthOnlyRepo)(nil).GetHouseFlatsRepo), id)
}

// MockModerationOnlyRepo is a mock of ModerationOnlyRepo interface.
type MockModerationOnlyRepo struct {
	ctrl     *gomock.Controller
	recorder *MockModerationOnlyRepoMockRecorder
}

// MockModerationOnlyRepoMockRecorder is the mock recorder for MockModerationOnlyRepo.
type MockModerationOnlyRepoMockRecorder struct {
	mock *MockModerationOnlyRepo
}

// NewMockModerationOnlyRepo creates a new mock instance.
func NewMockModerationOnlyRepo(ctrl *gomock.Controller) *MockModerationOnlyRepo {
	mock := &MockModerationOnlyRepo{ctrl: ctrl}
	mock.recorder = &MockModerationOnlyRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModerationOnlyRepo) EXPECT() *MockModerationOnlyRepoMockRecorder {
	return m.recorder
}

// CreateHouseRepo mocks base method.
func (m *MockModerationOnlyRepo) CreateHouseRepo(house domain.House) (domain.House, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHouseRepo", house)
	ret0, _ := ret[0].(domain.House)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHouseRepo indicates an expected call of CreateHouseRepo.
func (mr *MockModerationOnlyRepoMockRecorder) CreateHouseRepo(house any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHouseRepo", reflect.TypeOf((*MockModerationOnlyRepo)(nil).CreateHouseRepo), house)
}

// UpdateFlatRepo mocks base method.
func (m *MockModerationOnlyRepo) UpdateFlatRepo(fl domain.Flat) (domain.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlatRepo", fl)
	ret0, _ := ret[0].(domain.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlatRepo indicates an expected call of UpdateFlatRepo.
func (mr *MockModerationOnlyRepoMockRecorder) UpdateFlatRepo(fl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlatRepo", reflect.TypeOf((*MockModerationOnlyRepo)(nil).UpdateFlatRepo), fl)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CheckUserRepo mocks base method.
func (m *MockRepository) CheckUserRepo(tokenString string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserRepo", tokenString)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserRepo indicates an expected call of CheckUserRepo.
func (mr *MockRepositoryMockRecorder) CheckUserRepo(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserRepo", reflect.TypeOf((*MockRepository)(nil).CheckUserRepo), tokenString)
}

// CreateFlatRepo mocks base method.
func (m *MockRepository) CreateFlatRepo(flat domain.Flat) (domain.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlatRepo", flat)
	ret0, _ := ret[0].(domain.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlatRepo indicates an expected call of CreateFlatRepo.
func (mr *MockRepositoryMockRecorder) CreateFlatRepo(flat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlatRepo", reflect.TypeOf((*MockRepository)(nil).CreateFlatRepo), flat)
}

// CreateHouseRepo mocks base method.
func (m *MockRepository) CreateHouseRepo(house domain.House) (domain.House, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHouseRepo", house)
	ret0, _ := ret[0].(domain.House)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHouseRepo indicates an expected call of CreateHouseRepo.
func (mr *MockRepositoryMockRecorder) CreateHouseRepo(house any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHouseRepo", reflect.TypeOf((*MockRepository)(nil).CreateHouseRepo), house)
}

// DummyLoginRepo mocks base method.
func (m *MockRepository) DummyLoginRepo(status string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DummyLoginRepo", status)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DummyLoginRepo indicates an expected call of DummyLoginRepo.
func (mr *MockRepositoryMockRecorder) DummyLoginRepo(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DummyLoginRepo", reflect.TypeOf((*MockRepository)(nil).DummyLoginRepo), status)
}

// GetHouseFlatsRepo mocks base method.
func (m *MockRepository) GetHouseFlatsRepo(id int) ([]domain.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHouseFlatsRepo", id)
	ret0, _ := ret[0].([]domain.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHouseFlatsRepo indicates an expected call of GetHouseFlatsRepo.
func (mr *MockRepositoryMockRecorder) GetHouseFlatsRepo(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHouseFlatsRepo", reflect.TypeOf((*MockRepository)(nil).GetHouseFlatsRepo), id)
}

// LoginRepo mocks base method.
func (m *MockRepository) LoginRepo(user domain.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginRepo", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginRepo indicates an expected call of LoginRepo.
func (mr *MockRepositoryMockRecorder) LoginRepo(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginRepo", reflect.TypeOf((*MockRepository)(nil).LoginRepo), user)
}

// RegisterRepo mocks base method.
func (m *MockRepository) RegisterRepo(user domain.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRepo", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterRepo indicates an expected call of RegisterRepo.
func (mr *MockRepositoryMockRecorder) RegisterRepo(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRepo", reflect.TypeOf((*MockRepository)(nil).RegisterRepo), user)
}

// UpdateFlatRepo mocks base method.
func (m *MockRepository) UpdateFlatRepo(fl domain.Flat) (domain.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlatRepo", fl)
	ret0, _ := ret[0].(domain.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlatRepo indicates an expected call of UpdateFlatRepo.
func (mr *MockRepositoryMockRecorder) UpdateFlatRepo(fl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlatRepo", reflect.TypeOf((*MockRepository)(nil).UpdateFlatRepo), fl)
}
